ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Minnesota")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Arizona")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("New Mexico")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Nevada")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Texas")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
install.packages("tabyl")
install.packages("janitor")
tabyl(community_transmission)
tabyl(community_transmission_level)
library(janitor)
tabyl(community_transmission_level)
tabyl(recent_covid$community_transmission_level)
county_covid %>%
filter(state_name %in% c("Maryland")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Michigan")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Minnesota")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Texas")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Florida")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
twodaysago = today() - days(2) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
county_covid %>%
filter(state_name %in% c("Texas")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Wyoming")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Michigan")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
# get SNF-level COVID vax rates and bed counts from CMS
# merge SNF vax rates with SNF geolocation data
### MAPPING: COUNTY COVID CASE RATES
county_covid %>%
filter(state_name %in% c("Pennsylvania")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
# + labs(fill = "7-day rolling cases per 100k")
#### NOTES FEBRUARY 2/12:
# Problems with very very small counties (Loving County TX; Mehnomen County MN) that have inflated transmission
# not sure how to code/handle suppressed counties...the "high/low/moderate" isn't very useful because almost all are "high"
# need to figure out how NYT is doing this: https://www.nytimes.com/interactive/2021/us/texas-covid-cases.html
# also look at how Mayo Clinic is doing this: https://www.mayoclinic.org/coronavirus-covid-19/map/texas
#### How-to links for mapping tasks
# https://urbaninstitute.github.io/r-at-urban/mapping.html#Spatial_Operations
# https://stackoverflow.com/questions/63649308/convert-latitude-longitude-points-to-map-with-geom-sf
### Reactive
# input state of interest
# current date
county_covid %>%
filter(state_name %in% c("Texas")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Maryland")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Maine")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Michigan")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Minnesota")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
######## Prototype / testing of flexdashboard framework for making reactive county covid maps
### LOAD PACKAGES
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
### GET DATA (GLOBAL)
## get county covid data and relevant geodata for mapping
twodaysago = today() - days(7) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
# get SNF-level COVID vax rates and bed counts from CMS
# merge SNF vax rates with SNF geolocation data
### MAPPING: COUNTY COVID CASE RATES
county_covid %>%
filter(state_name %in% c("Georgia")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
# + labs(fill = "7-day rolling cases per 100k")
#### NOTES FEBRUARY 2/12:
# Problems with very very small counties (Loving County TX; Mehnomen County MN) that have inflated transmission
# not sure how to code/handle suppressed counties...the "high/low/moderate" isn't very useful because almost all are "high"
# need to figure out how NYT is doing this: https://www.nytimes.com/interactive/2021/us/texas-covid-cases.html
# also look at how Mayo Clinic is doing this: https://www.mayoclinic.org/coronavirus-covid-19/map/texas
#### How-to links for mapping tasks
# https://urbaninstitute.github.io/r-at-urban/mapping.html#Spatial_Operations
# https://stackoverflow.com/questions/63649308/convert-latitude-longitude-points-to-map-with-geom-sf
### Reactive
# input state of interest
# current date
######## Prototype / testing of flexdashboard framework for making reactive county covid maps
### LOAD PACKAGES
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
### GET DATA (GLOBAL)
## get county covid data and relevant geodata for mapping
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
# get SNF-level COVID vax rates and bed counts from CMS
# merge SNF vax rates with SNF geolocation data
### MAPPING: COUNTY COVID CASE RATES
county_covid %>%
filter(state_name %in% c("Georgia")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
# + labs(fill = "7-day rolling cases per 100k")
#### NOTES FEBRUARY 2/12:
# Problems with very very small counties (Loving County TX; Mehnomen County MN) that have inflated transmission
# not sure how to code/handle suppressed counties...the "high/low/moderate" isn't very useful because almost all are "high"
# need to figure out how NYT is doing this: https://www.nytimes.com/interactive/2021/us/texas-covid-cases.html
# also look at how Mayo Clinic is doing this: https://www.mayoclinic.org/coronavirus-covid-19/map/texas
#### How-to links for mapping tasks
# https://urbaninstitute.github.io/r-at-urban/mapping.html#Spatial_Operations
# https://stackoverflow.com/questions/63649308/convert-latitude-longitude-points-to-map-with-geom-sf
### Reactive
# input state of interest
# current date
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
urldate
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
county_covid %>%
filter(state_name %in% c("Georgia")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
# get SNF-level COVID vax rates and bed counts from CMS
county_covid %>%
filter(state_name %in% c("Arizona")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Maryland")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
library(tidyverse)
library(lubridate)
library(RSocrata)
library(urbnmapr)
twodaysago = today() - days(5) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)                                                    # preps fips code for merge
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
county_covid %>%
filter(state_name %in% c("Georgia")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
twodaysago = today() - days(7) # pulls date from two days ago using lubridate
urldate = paste("https://data.cdc.gov/resource/8396-v7yb.json?report_date=",twodaysago,"T00:00:00.000", sep="") # creates a url for the api call with the date from two days ago
urldate # inspect url
recent_covid <- read.socrata(urldate)  # pull county-level case and death data from two days ago using CDC api
recent_covid <- recent_covid %>%
mutate(cases_per_100k_7_day_count = gsub(",", "", cases_per_100k_7_day_count)) %>% # removes commas from case counts
mutate(cases = as.numeric(cases_per_100k_7_day_count)) %>%                         # creates new numeric rolling 7-day case count variable
rename(county_fips = fips_code)
county_covid <- left_join(recent_covid, counties, by = "county_fips") %>%            # merges in geodata via fips codes for mapping
rename(state_name = state_name.x)
county_covid %>%
filter(state_name %in% c("Georgia")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Arizona")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Maryland")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Maine")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("New York")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("California")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Texas")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
county_covid %>%
filter(state_name %in% c("Vermont")) %>%
ggplot(aes(long, lat, group = group, fill = cases)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_gradient(
low = "white",
high = "red",
na.value = "grey50"
)
